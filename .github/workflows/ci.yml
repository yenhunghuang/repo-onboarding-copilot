name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  DOCKER_IMAGE_NAME: 'repo-onboarding-copilot'

jobs:
  # 基本程式碼品質檢查
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: make deps

      - name: Run linter
        run: make lint

      - name: Check formatting
        run: |
          make fmt
          git diff --exit-code || (echo "Code is not formatted properly" && exit 1)

  # 單元測試與覆蓋率
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: make deps

      - name: Run tests with coverage
        run: make test-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Coverage Report
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage is below 80%"
            exit 1
          fi

  # 安全性掃描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        run: make security

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 集成測試 (需要 Docker)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: make deps

      - name: Run integration tests
        run: |
          go test -v ./test/integration/... -timeout=10m
        env:
          DOCKER_HOST: tcp://localhost:2376
          DOCKER_TLS_VERIFY: 1

  # 建置應用程式
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build binary
        run: |
          make deps
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make build
        env:
          CGO_ENABLED: 0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DOCKER_IMAGE_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/

  # Docker 映像建置與掃描
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # 部署到預覽環境 (僅 PR)
  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'pull_request'
    environment:
      name: preview-pr-${{ github.event.number }}
      url: https://repo-copilot-pr-${{ github.event.number }}.preview.example.com
    steps:
      - name: Deploy to Preview
        run: |
          echo "🚀 Deploying PR #${{ github.event.number }} to preview environment"
          echo "Preview URL: https://repo-copilot-pr-${{ github.event.number }}.preview.example.com"
          # 這裡可以整合 Render、Zeabur 或 K8s 部署邏輯

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview Environment Ready!**
              
              Preview URL: https://repo-copilot-pr-${{ github.event.number }}.preview.example.com
              
              - 🏗️ Build: ✅ Success
              - 🧪 Tests: ✅ All Passed  
              - 🛡️ Security: ✅ Scanned
              - 📦 Docker: ✅ Built & Scanned
              
              Ready for testing! 🎉`
            })

  # 生產環境部署 (僅 main 分支)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://repo-onboarding-copilot.com
    steps:
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to production environment"
          # 這裡整合實際的生產環境部署邏輯
          
      - name: Health Check
        run: |
          echo "🏥 Running production health checks"
          # 健康檢查邏輯